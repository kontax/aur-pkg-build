#!/bin/bash
#
# setup-repo
#
# Sets up an AUR repository locally from an S3 bucket by downloading the 
# database files, and importing the GPG key for signing built packages.
#

set -Eeuo pipefail

err_report() {
    local parent_lineno="$1"
    local message="$2"
    local code="${3:-1}"

    echo "err_report for setup-repo"
    if [[ -n "$message" ]]; then
        echo "$0: ${parent_lineno}: $message" >> /err.log
    else
        echo "$0: ${parent_lineno}" >> /err.log
    fi
    exit $code
}
trap 'err_report ${LINENO} "$0: ${BASH_COMMAND}" $?' ERR

# Requried environment variables
region=${AWS_REGION}        # The AWS region the SQS queue is contained in
repo_name=${REPO_NAME}      # The name of the DB file within the repository
arch=${REPO_ARCH}           # The architecture to build for (eg. x86_64)
aur_key=${AUR_KEY}          # Name of the SSM param containing the signing key


if [ "$#" -ne 1 ]; then
  echo -e "Please provide S3 bucket to sync from"
  echo -e "Usage: setup-repo <repo-bucket>"
  exit 1
fi

repo_bucket="$1"

# Only create the repository if it doesn't already exist
if [ -d "/${repo_bucket}" ]; then 
    echo "setup-repo: ${repo_bucket} already exists on the filesystem"
    exit 0
fi

# Pull repo DB file
echo "setup-repo: Pulling database from S3 Repository: ${repo_bucket}/${arch}/${repo_name}"
aws s3 sync \
    --region ${region} \
    --acl public-read \
    --exclude "*" \
    --include "*files.tar.zst" \
    --include "*db.tar.zst" \
    s3://${repo_bucket} "/${repo_bucket}/"

ln -sf "$repo_name.db.tar.zst" "/${repo_bucket}/${arch}/${repo_name}.db"
ln -sf "$repo_name.files.tar.zst" "/${repo_bucket}/${arch}/${repo_name}.files"

chown -R makepkg "/${repo_bucket}"

echo "setup-repo: Add repo to pacman.conf"
cp /etc/pacman.conf /etc/pacman.conf.bak
cat >> /etc/pacman.conf << EOF
[${repo_name}]
Server = file:///${repo_bucket}/${arch}
SigLevel = Optional TrustAll
EOF
pacman -Sy
echo "setup-repo: Finished setting up repository"

