#!/bin/bash
#
# pull-queue
#
# Uses the AWS CLI utility to fetch a message containing a package name from 
# SQS, download and build that package, and add it to the personal repository 
# located within S3.
#
# Example AUR database within an S3 bucket using the details above:
#   s3://${repo_bucket}/${repo_arch}/${repo_name}.db.tar.xz
#

set -uo pipefail
trap 's=$?; /send-pushover "$pkg Build Error" "$0: Error on line "$LINENO": $BASH_COMMAND"; /reset $pkg $receipt_handle; exit $s' ERR
IFS=$'\n\t'

# Requried environment variables
queue=${SQS_QUEUE_URL}          # The URL of the SQS queue
region=${AWS_REGION}            # The AWS region the SQS queue is contained in
repo_name=${REPO_NAME}          # The name of the DB file within the repository
arch=${REPO_ARCH}               # The architecture to build for (eg. x86_64)
fanout_queue=${FANOUT_QUEUE}    # URL of the queue to send a completion or failure notification to


# Sends a message to the AWS SQS queue
function send_msg() {
    message=$1
    aws sqs send-message \
        --region ${region} \
        --queue-url ${fanout_queue} \
        --message-body "${message}"
}

# Deletes a message from the AWS SQS queue
function delete_msg() {
    handle="$1"
    aws sqs delete-message \
        --region ${region} \
        --queue-url ${queue} \
        --receipt-handle "${handle}"
}

# Set up the GPG key used for sigining AUR packages
# this is sourced so as to set the GPGKEY variable
source /setup-signing-key

# Fetch messages and render them until the queue is drained.
while [ /bin/true ]; do

    # Fetch the next message and extract the package to build
    echo "Fetching messages fom SQS queue: ${queue}..."
    result=$( \
        aws sqs receive-message \
            --region "${region}" \
            --queue-url "${queue}" \
            --wait-time-seconds 20 \
            --query Messages[0] \
    )

    if [[ -z "${result}" || "${result}" == "null" ]]; then
        echo "No messages left in queue. Exiting."
        exit 0
    else

        receipt_handle=$(echo ${result} | jq -r '.ReceiptHandle')
        body=$(echo $result | jq '.Body | fromjson')
        pkg=$(echo $body | jq -r '.PackageName')
        git_url=$(echo $body | jq -r '.git_url')
        repo_bucket=$(echo $body | jq -r '.Repo')

        # Set up the repository from s3 - this only needs to be done once
        echo "Setting up repository $repo_bucket"
        /setup-repo "${repo_bucket}"

        echo "Message: ${result}."
        echo "Receipt handle: ${receipt_handle}."
        echo "Package: ${pkg}"
        echo "Personal Repo: ${repo_bucket}"

        if [[ "$pkg" == "GIT_REPO" ]]; then

            # Update the metapackage and all built packages
            pkgs=$(echo $body | jq -r '.built_packages[]')
            /build-repo "${repo_bucket}" "${git_url}" "${pkgs}"

            echo "Clearing the fanout status table"
            send_msg "{ \
                \"FanoutStatus\": \"Complete\", \
                \"RepoName\": \"${repo_bucket}\", \
                \"RepoUrl\": \"https://${repo_bucket}.s3-${region}.amazonaws.com/${arch}/${repo_name}.db\" \
            }"

        else
            # Use the AUR building script
            echo "Building a ${pkg} from the AUR"
            /build-aur "$repo_bucket" "$pkg"

            # Any dependencies that were build also need to be added
            # Note: Grep doesn't work for whatever reason
            echo "pull-queue: Getting dependencies for ${pkg}"
            depends=$(aur depends "${pkg}" | sed "s/${pkg}//g")
            echo "pull-queue: ${pkg} has the following dependencies:"
            echo ${depends}
            for dep in $depends; do

                # Figure out the package name by concatenating the
                # name, version and arch according to pacman.
                # This could be a little brittle...
                file_check=$(pacman -Si "${pkg}" \
                    | egrep "Name|Version|Architecture" \
                    | awk '{print $3}' \
                    | paste -sd "-")

                # Check if it's within the newly created repository
                is_built=$(ls /${repo_bucket}/${arch}/*.pkg.tar.xz | grep ${file_check} | wc -l)
                if [ $is_built -gt 0 ]; then

                    # If so, add it to the queue
                    echo "Adding dependency ${dep} to completion queue"
                    send_msg "{\"PackageName\": \"${dep}\", \"BuildStatus\": \"Complete\"}"
                fi
            done

            echo "Notifying queue of completion"
            send_msg "{ \
                \"PackageName\": \"${pkg}\", \
                \"BuildStatus\": \"Complete\", \
                \"RepoName\": \"${repo_bucket}\", \
                \"RepoUrl\": \"https://${repo_bucket}.s3-${region}.amazonaws.com/${arch}/${repo_name}.db\" \
            }"
        fi

        echo "Deleting message..."
        delete_msg "${receipt_handle}"

        archives=$(ls /${repo_bucket}/${arch}/ | egrep "pkg.tar.xz$")
        echo "Sending notification message..."
        if [[ "$pkg" == "GIT_REPO" ]]; then
            /send-pushover "${repo_bucket}" "Built: ${archives}"
        else
            /send-pushover "${pkg}" "Built: ${archives}"
        fi


    fi
done
