#!/usr/bin/env bash

set -Eeuo pipefail

err_report() {
    local parent_lineno="$1"
    local message="$2"
    local code="${3:-1}"

    echo "err_report for build-git"
    if [[ -n "$message" ]]; then
        echo "$0: ${parent_lineno}: $message" >> /err.log
    else
        echo "$0: ${parent_lineno}" >> /err.log
    fi
    exit $code
}
trap 'err_report ${LINENO} "$0: ${BASH_COMMAND}" $?' ERR

if [ "$#" -ne 3 ]; then
  echo -e "Please provide git repository to build."
  echo -e "The repository must contain a build.sh script within it's pkg directory."
  echo -e "Usage: build-git <git-repo> <repo-name> <git-branch>"
  exit 1
fi

git_repo=$1
repo_name=$2
git_branch=$3

# Sort out the build directory
if [ -d /build ]; then
    rm -r /build
fi

mkdir /build
chown -R makepkg /build
cd /build

# Clone the package
git clone $git_repo
chown -R makepkg:users /build

# Pull any submodules and run the build script
cd $(ls | head)/pkg/
git submodule init
sudo -u makepkg git checkout ${git_branch}
sudo -u makepkg git pull --recurse-submodules
sudo -u makepkg bash build.sh

# Build the package and update the repo DB
pacman -Sy
sudo -u makepkg aur build -Sf -d "${repo_name}" -- --noconfirm

