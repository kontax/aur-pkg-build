#!/bin/bash
#
# pull-queue
#
# Uses the AWS CLI utility to fetch a message containing a package name from SQS, download and build that
# package, and add it to the personal repository located within S3.
#

# Requried environment variables
queue=${SQS_QUEUE_URL}                  # The URL of the SQS queue
region=${AWS_REGION}                    # The AWS region the SQS queue is contained in

repo_name=${REPO_NAME}                  # The name of the DB file within the repository
arch=${REPO_ARCH}                       # The architecture to build for (eg. x86_64)
pushover_token=${PUSHOVER_TOKEN}        # API key for the pushover application
pushover_user=${PUSHOVER_USER}          # User key for pushover notifications


# Fetch messages and render them until the queue is drained.
while [ /bin/true ]; do

    # Fetch the next message and extract the package to build
    echo "Fetching messages fom SQS queue: ${queue}..."
    result=$( \
        aws sqs receive-message \
            --region ${region} \
            --queue-url ${queue} \
            --wait-time-seconds 20 \
            --query Messages[0] \
    )

    if [[ -z "${result}" || "${result}" == "null" ]]; then
        echo "No messages left in queue. Exiting."
        exit 0
    else

        receipt_handle=$(echo ${result} | jq -r '.ReceiptHandle')
        body=$(echo $result | jq '.Body | fromjson')
        pkg=$(echo $body | jq -r '.PackageName')
        repo_bucket=$(echo $body | jq -r '.Repo' | sed 's|https://||g')
        git_url=$(echo $body | jq -r '.git_url')

        echo "Message: ${result}."
        echo "Receipt handle: ${receipt_handle}."
        echo "Package: ${pkg}"
        echo "Personal Repo: ${repo_bucket}"

        # Build scripts
        mkdir /build
        mkdir /pkg

        if [[ "$pkg" == "GIT_REPO" ]]; then
            # Save the PKGBUILD and build that
            echo "Building PKGBUILD from git repo"
            /build-git $git_url
        else
            # Use the AUR building script
            echo "Building a ${pkg} from the AUR"
            /build-aur "$pkg"
        fi
        
        # Pull repo DB file
        echo "Pulling database from S3 Repository: ${repo_bucket}/${arch}/${repo_name}"
        repodir=${repo_name}/${arch}
        aws s3 sync \
            --region ${region} \
            --acl public-read \
            --exclude "*" \
            --include "*files.tar.xz" \
            --include "*db.tar.xz" \
            s3://${repo_bucket} ${repo_name}/

        ln -sf ${repodir}/${repo_name}.files.tar.xz ${repodir}/${repo_name}.files
        ln -sf ${repodir}/${repo_name}.db.tar.xz ${repodir}/${repo_name}.db

        # repo-add new package
        echo "Adding new package(s) to repository"
        cp /pkg/*.pkg.tar.xz ${repodir}
        pushd ${repodir}
        archives=$(ls *.pkg.tar.xz)
        for build in *.pkg.tar.xz; do
            repo-add ${repo_name}.db.tar.xz ${build}
        done
        popd

        # Sync up DB and package to s3
        #aws s3 sync \
        #    --region ${region} \
        #    --acl public-read \
        #    --follow-symlinks \
        #    ${repodir}/ s3://${repo_bucket}/${arch}/

        echo "Cleaning up..."
        /bin/rm -rf /build
        /bin/rm -rf /pkg
        /bin/rm -rf ${repodir}

        echo "Deleting message..."
        aws sqs delete-message \
            --region ${region} \
            --queue-url ${queue} \
            --receipt-handle "${receipt_handle}"

        echo "Sending notification message..."
        curl -s \
            --form-string "token=${pushover_token}" \
            --form-string "user=${pushover_user}" \
            --form-string "title=${pkg}" \
            --form-string "message=Built: ${archives}" \
            "https://api.pushover.net/1/messages.json"

    fi
done
